
/*
 * RegistgerFile.java
 *
 * Created on 05-Nov-2012, 13:11:05
 */

package FlatFile;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import uk.ac.leeds.mass.fmf.shared_objects.IApplicationInformation;
import uk.ac.leeds.mass.fmf.shared_objects.RegisteredDataSource;
import javax.swing.JCheckBoxMenuItem;
import uk.ac.leeds.mass.fmf.data_management.RegisteredDataSources;
import uk.ac.leeds.mass.fmf.shared_objects.FMFTable;


/**
 *
 * @author geo8kh
 */
public class RegisterFile extends javax.swing.JPanel implements javax.swing.Action {

    private IApplicationInformation ai = null;
    private RegisteredDataSource rds = null;
    private boolean listValueChanged = false;
    private boolean headersInFirstRow = false;
    RegisterTableModel tabModel = null;
    Object[] o = null;
    private int columnID = 0;

    private JCheckBoxMenuItem stringType = new JCheckBoxMenuItem("String");
    private JCheckBoxMenuItem integerType = new JCheckBoxMenuItem("Integer");
    private JCheckBoxMenuItem doubleType = new JCheckBoxMenuItem("Double");

    /** Creates new form RegistgerFile */
    private RegisterFile() {
        initComponents();
    }

    public RegisterFile(IApplicationInformation ai, RegisteredDataSource rds){
        this();
        this.ai = ai;
        this.rds = rds;

        //this needs to be called after the rds has been setup
        setupComponents();
    }

    private void setupComponents(){

        this.fileList.setListData(getFileList().toArray());
        this.sampleData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        
        //create the text qualifier button group
        this.textQualifier.add(tqNone);
        this.textQualifier.add(tqDouble);
        this.textQualifier.add(tqSingle);

        this.textQualifier.setSelected(tqDouble.getModel(), true);

        this.delimiter.add(delTab);
        this.delimiter.add(delComma);
        this.delimiter.add(delPipe);
        this.delimiter.add(delHammer);
        this.delimiter.add(delColon);
        this.delimiter.add(delSemiColon);

        this.delimiter.setSelected(delComma.getModel(), true);

        this.sampleData.setColumnSelectionAllowed(true);
        
        
        this.stringType.addActionListener(this);
        this.integerType.addActionListener(this);
        this.doubleType.addActionListener(this);

        this.fieldTypes.add(stringType);
        this.fieldTypes.add(integerType);
        this.fieldTypes.add(doubleType);

        this.fieldTypeMenu.add(stringType);
        this.fieldTypeMenu.add(integerType);
        this.fieldTypeMenu.add(doubleType);

    }

    private ArrayList<String> getFileList(){
        File f = new File(rds.getFileName());
        if (!f.exists()){f.mkdir();}

        ArrayList<String> list = new ArrayList<String>();

        for (File file : f.listFiles()) {
            if (!file.isDirectory() && !rds.tableExists( FlatFileManager.stripFileExtention(file.getName()) ) ){
                list.add(file.getName());
            }
        }
        return list;
    }

    /** This method is called from within the constructor to     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textQualifier = new javax.swing.ButtonGroup();
        delimiter = new javax.swing.ButtonGroup();
        fieldTypes = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        fieldTypeMenu = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        sampleData = new javax.swing.JTable();
        isFirstRowHeader = new javax.swing.JCheckBox();
        registerTable = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        tqNone = new javax.swing.JRadioButton();
        tqDouble = new javax.swing.JRadioButton();
        tqSingle = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        delComma = new javax.swing.JRadioButton();
        delHammer = new javax.swing.JRadioButton();
        delPipe = new javax.swing.JRadioButton();
        delColon = new javax.swing.JRadioButton();
        delSemiColon = new javax.swing.JRadioButton();
        delTab = new javax.swing.JRadioButton();

        fileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fileListMouseReleased(evt);
            }
        });
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileList);

        sampleData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        sampleData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sampleDataMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sampleDataMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(sampleData);

        isFirstRowHeader.setText("Headers in first row");
        isFirstRowHeader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isFirstRowHeaderActionPerformed(evt);
            }
        });

        registerTable.setText("Register");
        registerTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerTableActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Text Qualifier"));

        tqNone.setText("none");
        tqNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tqNoneActionPerformed(evt);
            }
        });

        tqDouble.setText("\"");
        tqDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tqDoubleActionPerformed(evt);
            }
        });

        tqSingle.setText("'");
        tqSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tqSingleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tqSingle)
                    .addComponent(tqDouble)
                    .addComponent(tqNone))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tqNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tqDouble)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tqSingle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Delimiter"));

        delComma.setText(",");
        delComma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCommaActionPerformed(evt);
            }
        });

        delHammer.setText("Â¬");
        delHammer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delHammerActionPerformed(evt);
            }
        });

        delPipe.setText("|");
        delPipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delPipeActionPerformed(evt);
            }
        });

        delColon.setText(":");
        delColon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delColonActionPerformed(evt);
            }
        });

        delSemiColon.setText(";");
        delSemiColon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delSemiColonActionPerformed(evt);
            }
        });

        delTab.setText("Tab");
        delTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delTabActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delComma)
                    .addComponent(delHammer)
                    .addComponent(delPipe)
                    .addComponent(delColon)
                    .addComponent(delSemiColon)
                    .addComponent(delTab))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(delComma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delHammer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delPipe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delColon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delSemiColon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delTab))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isFirstRowHeader)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addComponent(registerTable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isFirstRowHeader))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(registerTable)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
        listValueChanged = true;
        o = null;
        columnID = 0;
    }//GEN-LAST:event_fileListValueChanged

    private void fileListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseReleased
        if ( listValueChanged ){
            this.isFirstRowHeader.setSelected(false);
            tryToRead();
            listValueChanged = false;
        }
    }//GEN-LAST:event_fileListMouseReleased

    private void isFirstRowHeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isFirstRowHeaderActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_isFirstRowHeaderActionPerformed

    private void delCommaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCommaActionPerformed
        o = null;
        tryToRead();
}//GEN-LAST:event_delCommaActionPerformed

    private void delHammerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delHammerActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_delHammerActionPerformed

    private void delPipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delPipeActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_delPipeActionPerformed

    private void delColonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delColonActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_delColonActionPerformed

    private void delSemiColonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delSemiColonActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_delSemiColonActionPerformed

    private void delTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delTabActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_delTabActionPerformed

    private void tqNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tqNoneActionPerformed
        o = null;
        tryToRead();
    }//GEN-LAST:event_tqNoneActionPerformed

    private void tqDoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tqDoubleActionPerformed
        tryToRead();
    }//GEN-LAST:event_tqDoubleActionPerformed

    private void tqSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tqSingleActionPerformed
        tryToRead();
    }//GEN-LAST:event_tqSingleActionPerformed

    private void sampleDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleDataMouseReleased
        showFieldTypePopup(evt);
    }//GEN-LAST:event_sampleDataMouseReleased


    private void showFieldTypePopup(java.awt.event.MouseEvent evt){
        if (evt.isPopupTrigger()){
            sampleData.clearSelection();

            columnID = sampleData.columnAtPoint( new Point( evt.getX(), evt.getY() ) );
            sampleData.changeSelection(0, columnID, false, false);
            sampleData.changeSelection(sampleData.getModel().getRowCount(), columnID, false, true);

            Class C = sampleData.getModel().getColumnClass(columnID);
            if ( C==Integer.class ){
                fieldTypes.setSelected(integerType.getModel(), true);
            }else if ( C==String.class ){
                fieldTypes.setSelected(stringType.getModel(), true);
            }else if ( C==Double.class ){
                fieldTypes.setSelected(doubleType.getModel(), true);
            }else{
                fieldTypes.clearSelection();
            }

            fieldTypeMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    private void registerTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerTableActionPerformed

        this.registerTable.setEnabled(false);

        RegistrationHandler rh = new RegistrationHandler(rds.getRdsID(), 
                FlatFileManager.stripFileExtention(fileList.getSelectedValue().toString()));

        //set up whether headers appear in the first row of the data
        rh.setHeadersInFirstRow(headersInFirstRow);

        //set the delimiter character
        rh.setDelimiter(String.valueOf(getDelimiter()));

        //set the text qualifier
        Character c = getTextQualifier();
        if (c == 'N'){rh.setTextQualifier(null);}else{rh.setTextQualifier(String.valueOf(c));}

        //get the last modified date from the file and set it
        File f = new File(rds.getFileName() +System.getProperty("file.separator")+fileList.getSelectedValue());
        Date D = null;
        try{D = new Date(f.lastModified());}catch(Exception e){D = new Date();}
        rh.setFileDate(D);
        f = null;

        //add the fields
        RegisterTableModel model = (RegisterTableModel)this.sampleData.getModel();
        for (int i = 0; i < model.getColumnCount(); i++) {
            rh.addField(model.getColumnName(i), model.getColumnFMFType(i));
        }

        rh.setRegistered(true);
        rh.setVerified(true);

        rh.writeFMLFile();

        FMFTable t = FlatFileManager.createTableFromHandler(rh);
        rds.addTable(t);
        RegisteredDataSources.getCurrent().insertTable(rds, t);

        this.fileList.setListData(getFileList().toArray());
    }//GEN-LAST:event_registerTableActionPerformed

    private void sampleDataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleDataMousePressed
        showFieldTypePopup(evt);
    }//GEN-LAST:event_sampleDataMousePressed


    private void tryToRead(){
        CSVReader reader = null;
        int linesToRead = 10;

        //check and make sure that a file is selected
        if (!fileList.isSelectionEmpty()){

            try {
                Character c = getTextQualifier();
                if ( c == 'N' ){
                    reader = new CSVReader(
                        new FileReader( rds.getFileName() +System.getProperty("file.separator")+fileList.getSelectedValue() ),
                        getDelimiter(), CSVWriter.NO_QUOTE_CHARACTER
                        );
                }else{
                    reader = new CSVReader(
                        new FileReader( rds.getFileName() +System.getProperty("file.separator")+fileList.getSelectedValue() ),
                        getDelimiter(), c
                        );
                }

                String[][] sampleLines = new String[linesToRead][];
                String[] headers = null;

                String [] nextLine;
                int lineCounter = -1;

                int lineCounterIncrement = 1;
                if ( this.isFirstRowHeader.isSelected() ){
                    headersInFirstRow = true;
                    linesToRead++;
                    lineCounterIncrement++;
                }else{
                    headersInFirstRow = false;
                }

                //read from the file until the end or the first five lines have been read
                while ( ((nextLine = reader.readNext()) != null) && (lineCounter+lineCounterIncrement < linesToRead) ) {

                    //increment the line counter to move sample lines to the next line
                    lineCounter++;

                    //if the headers should be read into first row and we are on the first row...
                    if ( headersInFirstRow && lineCounter==0 && headers==null ){
                        headers = nextLine;
                        //reset the line counter so that it just counts the content of the main data
                        lineCounter--;

                    //else put them in the main content
                    }else{
                        //set the next sample line to be the next line read in
                        sampleLines[lineCounter] = nextLine;
                    }

                }

                if ( lineCounter > -1 ){
                    tabModel = new RegisterTableModel(lineCounter+1,sampleLines[0].length, sampleLines);
                    
                    //the field types have not been set up so set them all to Strings
                    if (o==null){
                        o = new Object[sampleLines[0].length];
                        for (int i = 0; i < o.length; i++) {
                            o[i] = new String("NOT SET");
                        }
                    }

                    //create the auto suggested settings
                    Object[] suggested = new Object[sampleLines[0].length];
                    for (int column = 0; column < suggested.length; column++) {
                        boolean isNumeric = true;
                        for (int row = 0; row < lineCounter+1; row++) {
                            try{
                                Double.parseDouble(sampleLines[row][column]);
                            }catch(NumberFormatException nfe){
                                isNumeric = false;
                                break;
                            }
                        }
                        if (isNumeric) {suggested[column]=new Double(1.0);}else{suggested[column]=new String("SUGGESTED");}
                    }

                    //we need to set up the classes using manual settings and auto suggestions
                    //cycle through the columns
                    for (int i = 0; i < o.length; i++) {
                        //check and see if a manual setting has been made
                        if ( o[i].getClass() == String.class && o[i].equals("NOT SET")){
                            //if not use the auto suggested one
                            tabModel.setColumnClass(suggested[i], i);
                        }else{
                            //if it has been set use the manual override
                            tabModel.setColumnClass(o[i], i);
                        }


                    }
                    

                    //setup the headers if they are needed
                    if( headersInFirstRow && headers!=null ){tabModel.setColumnNames(headers);}

                    //need to do things for setting headings and stuff here.

                    this.sampleData.setModel(tabModel);
                }else{
                    this.sampleData.setModel(new RegisterTableModel(0,0, null));
                }

                reader.close();

                this.registerTable.setEnabled(true);

            } catch (FileNotFoundException ex) {
                this.registerTable.setEnabled(false);
                ex.printStackTrace();
            } catch (IOException e){
                this.registerTable.setEnabled(false);
                e.printStackTrace();
            }
        }

    }

    private Character getTextQualifier(){
        if ( this.tqNone.isSelected() ){
            return 'N';
        }else if ( this.tqDouble.isSelected() ){
            return '\"';
        }else if ( this.tqSingle.isSelected() ){
            return '\'';
        }else{
            //return the default if nothing selected (this should never happen!)
            return 'N';
        }
    }

    private Character getDelimiter(){
        if ( this.delComma.isSelected() ){
            return ',';
        }else if ( this.delColon.isSelected() ){
            return ':';
        }else if ( this.delSemiColon.isSelected() ){
            return ';';
        }else if ( this.delHammer.isSelected() ){
            return 'Â¬';
        }else if ( this.delPipe.isSelected() ){
            return '|';
        }else if ( this.delTab.isSelected() ){
            return '\t';
        }else if ( this.delColon.isSelected() ){
            return ':';
        }else{
            //return the default if nothing selected (this should never happen!)
            return ',';
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JRadioButton delColon;
    private javax.swing.JRadioButton delComma;
    private javax.swing.JRadioButton delHammer;
    private javax.swing.JRadioButton delPipe;
    private javax.swing.JRadioButton delSemiColon;
    private javax.swing.JRadioButton delTab;
    private javax.swing.ButtonGroup delimiter;
    private javax.swing.JPopupMenu fieldTypeMenu;
    private javax.swing.ButtonGroup fieldTypes;
    private javax.swing.JList fileList;
    private javax.swing.JCheckBox isFirstRowHeader;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton registerTable;
    private javax.swing.JTable sampleData;
    private javax.swing.ButtonGroup textQualifier;
    private javax.swing.JRadioButton tqDouble;
    private javax.swing.JRadioButton tqNone;
    private javax.swing.JRadioButton tqSingle;
    // End of variables declaration//GEN-END:variables


    @Override
    public Object getValue(String key) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void putValue(String key, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getActionCommand().equalsIgnoreCase("String")){
            o[columnID] = new String("SET");
        }else if (e.getActionCommand().equalsIgnoreCase("Integer")){
            o[columnID] = new Integer(1);
        }else if (e.getActionCommand().equalsIgnoreCase("Double")){
            o[columnID] = new Double(1.0);
        }

        tryToRead();
    }

}
