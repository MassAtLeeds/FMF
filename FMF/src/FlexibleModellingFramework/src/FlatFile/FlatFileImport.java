/*
 *   The Flexible Modelling Framework is a Social Science application for 
 *   synthesising individual level populations
 *   Copyright (C) 2013  Kirk Harland
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Contact email: k.harland@leeds.ac.uk
 */

package FlatFile;


import uk.ac.leeds.mass.fmf.shared_objects.IApplicationInformation;
import java.io.File;
import javax.swing.JFileChooser;
import uk.ac.leeds.mass.fmf.data_management.ApplicationDatabase;
import uk.ac.leeds.mass.fmf.data_management.DataAccessFactory;
import uk.ac.leeds.mass.fmf.data_management.RegisteredDataSources;
import uk.ac.leeds.mass.fmf.shared_objects.ICallBack;
import uk.ac.leeds.mass.fmf.shared_objects.IProcessManager;
import uk.ac.leeds.mass.fmf.shared_objects.RegisteredDataSource;
import uk.ac.leeds.mass.fmf.shared_objects.SystemProperties;

/**
 *
 * @author Kirk Harland
 */
public class FlatFileImport extends javax.swing.JPanel implements ICallBack{


    private IApplicationInformation ai;
    private FlatFileVerifyDataSource verify;

    /** Creates new form FlatFileImport */
    private FlatFileImport() {
        initComponents();
        setConnectEnabled();
    }

    public FlatFileImport(IApplicationInformation ai){
        this();
        this.ai = ai;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataDirectoryPath = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        connect = new javax.swing.JButton();
        pathError = new javax.swing.JLabel();

        setOpaque(false);

        dataDirectoryPath.setText("<<No Data Location Selected>>");
        dataDirectoryPath.setToolTipText("Enter the full path of the directory where flat files are stored.");
        dataDirectoryPath.setBorder(null);
        dataDirectoryPath.setPreferredSize(new java.awt.Dimension(135, 14));
        dataDirectoryPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataDirectoryPathFocusLost(evt);
            }
        });

        browse.setText("...");
        browse.setToolTipText("Browse for the data directory");
        browse.setRequestFocusEnabled(false);
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        pathError.setText("Select a directory");
        pathError.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataDirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathError)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(connect)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(pathError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browse)
                    .addComponent(dataDirectoryPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
    String s = launchFileBrowser();
    if ((s!=null) && (!s.equals(""))){this.dataDirectoryPath.setText(s);}
    setConnectEnabled();
}//GEN-LAST:event_browseActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        RegisteredDataSource rds = new RegisteredDataSource();
        rds.setDSN(false);
        rds.setFileName(dataDirectoryPath.getText());
        rds.setUserName("");
        rds.setPassword("");

        verify = new FlatFileVerifyDataSource(ai,rds);

        verify.setCallBack(this);
        verify.setName("Flat File Verification");
        IProcessManager pm = ai.getProcessManager();
        pm.addProcess(verify);

        this.dataDirectoryPath.setText("<<No Data Location Selected>>");
        setConnectEnabled();
}//GEN-LAST:event_connectActionPerformed

    private void dataDirectoryPathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDirectoryPathFocusLost
        setConnectEnabled();
    }//GEN-LAST:event_dataDirectoryPathFocusLost

    private void setConnectEnabled(){
        if( this.dataDirectoryPath.getText().equals("") || this.dataDirectoryPath.getText().equals("<<No Data Location Selected>>") ){
            this.connect.setEnabled(false);
        }else{
            this.connect.setEnabled(true);
        }
    }
    private String launchFileBrowser(){
    
        JFileChooser fc = null;

        String dataDIR = ApplicationDatabase.getCurrent().getSystemProperty(SystemProperties.CURRENT_DATA_DIR);
        if(!dataDIR.equals("")){
            //get a file and set it to be the chosen data directory
            File f = new File(dataDIR);

            if ((f.exists())&&(f.isDirectory())){
                    //Create a file chooser at the prefered data directory
                    fc = new JFileChooser(f);
            }else{
                    //Create a new file chooser at the root
                    fc = new JFileChooser();
            }
        }else{
            //Create a new file chooser at the root
            fc = new JFileChooser();
        }

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			
		//In response to a button click:
		int returnVal = fc.showOpenDialog(ai.getMainApplicationFrame());
			
        String s = "";
		if(returnVal == JFileChooser.APPROVE_OPTION) {				
			if(fc.getSelectedFile().isDirectory()){
				s = fc.getSelectedFile().getPath();
				ai.setDataDir(s);
			}else{
				System.out.println("A valid directory must be chosen.");
			}
		}
        
        return s;
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton connect;
    private javax.swing.JTextField dataDirectoryPath;
    private javax.swing.JLabel pathError;
    // End of variables declaration//GEN-END:variables


    @Override
    public void callBack() {

        RegisteredDataSource rds = verify.getSuccess();

        if (rds.isValid()){
            ApplicationDatabase db = ApplicationDatabase.getCurrent();
            if(db.datasourceExists(rds.getFileName())){db.dropDatasource(rds.getFileName());}

            int scrID = db.getNextDatasourceID();
            db.setDatasourceProperty(scrID, SystemProperties.DB_NAME, rds.getFileName());
            db.setDatasourceProperty(scrID, SystemProperties.DB_TYPE, Integer.toString(DataAccessFactory.FLAT_FILE));

            rds.setRdsID(scrID);
            rds.setDataType(DataAccessFactory.FLAT_FILE);

            RegisteredDataSources.getCurrent().addDataSource(rds);

        }else{
            if(verify.getCancel()){System.out.println("Operation cancelled...");}
            System.out.println("could not connect to datasource '" + rds.getFileName() + "'");
        }
    }

}
