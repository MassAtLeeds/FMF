/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ValidationPanel.java
 *
 * Created on 27-Feb-2009, 15:29:53
 */

package uk.ac.leeds.mass.fmf.microsimulation;

import uk.ac.leeds.mass.fmf.fit_statistics.GOFFactory;
import uk.ac.leeds.mass.fmf.fit_statistics.IGOF;
import uk.ac.leeds.mass.fmf.shared_objects.DataSourceHandler;
import uk.ac.leeds.mass.fmf.shared_objects.FMFTable;
import uk.ac.leeds.mass.fmf.shared_objects.IApplicationInformation;
import uk.ac.leeds.mass.fmf.shared_objects.RegisteredDataSource;
import uk.ac.leeds.mass.fmf.shared_objects.TreeCellInfo;

/**
 *
 * @author geo8kh
 */
public class ValidationPanel extends javax.swing.JPanel {

    private FMFTable popTable = null;
    private RegisteredDataSource rds = null;
    private IApplicationInformation ai;


    private GOFFactory factory = new GOFFactory();

    /** Creates new form ValidationPanel
     * @param ai
     */
    public ValidationPanel(IApplicationInformation ai) {
        this.ai = ai;
        initComponents();
        customiseComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultTable = new javax.swing.JTextField();
        gofPane = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        zoneIDField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        personIDField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(351, 275));
        setRequestFocusEnabled(false);

        resultTable.setEditable(false);
        resultTable.setText("<<result table>>");
        resultTable.setToolTipText("Synthesised population to be evaluated");
        resultTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        gofPane.setBorder(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Population to evaluate:");

        zoneIDField.setEditable(false);
        zoneIDField.setText("<<not set>>");
        zoneIDField.setToolTipText("The zone ID field in the population results table");
        zoneIDField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Zone ID Field:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Person ID Field:");

        personIDField.setEditable(false);
        personIDField.setText("<<not set>>");
        personIDField.setToolTipText("The zone ID field in the population results table");
        personIDField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultTable, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(zoneIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gofPane, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {personIDField, resultTable, zoneIDField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultTable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zoneIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gofPane, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane gofPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField personIDField;
    private javax.swing.JTextField resultTable;
    private javax.swing.JTextField zoneIDField;
    // End of variables declaration//GEN-END:variables


    FMFTable getPopTable(){
        return popTable;
    }

    RegisteredDataSource getPopRDS(){
        return rds;
    }

    String getZoneIDField(){
        if ( zoneIDField.getText().equals("<<not set>>") ){
            return "";
        }else{
            return zoneIDField.getText();
        }
    }
    String getPersonIDField(){
        if ( personIDField.getText().equals("<<not set>>") ){
            return "";
        }else{
            return personIDField.getText();
        }
    }

    private void customiseComponents(){

        gofPane.setViewportView( factory.getGOFPanel() );

        this.resultTable.setTransferHandler(new DataSourceHandler(){

            @Override
            public boolean shouldImport(TreeCellInfo t) {
                if ( t.getType() == TreeCellInfo.TABLE | t.getType() == TreeCellInfo.TABLE_ALTERED |
                            t.getType() == TreeCellInfo.TABLE_CACHED ){
                    return true;
                }
                return false;
            }

            @Override
            public void doAction(TreeCellInfo t) {
                rds = t.getRDS();
                popTable = rds.getTable(t.toString());
                resultTable.setText(t.toString());
                zoneIDField.setText("<<not set>>");
                personIDField.setText("<<not set>>");
            }

        });


        this.zoneIDField.setTransferHandler(new DataSourceHandler(){

            @Override
            public boolean shouldImport(TreeCellInfo t) {
                if ( (t.getType() == TreeCellInfo.NUMERIC_FIELD | t.getType() == TreeCellInfo.TEXT_FIELD) &&
                            ( popTable != null && popTable.fieldExists(t.toString()) ) ){
                    return true;
                }
                return false;
            }

            @Override
            public void doAction(TreeCellInfo t) {
                zoneIDField.setText( t.toString() );
            }

        });

        this.personIDField.setTransferHandler(new DataSourceHandler(){

            @Override
            public boolean shouldImport(TreeCellInfo t) {
                if ( (t.getType() == TreeCellInfo.NUMERIC_FIELD | t.getType() == TreeCellInfo.TEXT_FIELD) &&
                            ( popTable != null && popTable.fieldExists(t.toString()) ) ){
                    return true;
                }
                return false;
            }

            @Override
            public void doAction(TreeCellInfo t) {
                personIDField.setText( t.toString() );
            }

        });

    }


    IGOF[] getSelectedGOFTests(){
        return factory.getGOFTestsSelected();
    }

}
